--QUERY-1: identify cities where listeners listens the most.
--based on total length of all tracks played from listeners of that city.

SELECT DISTINCT L.LO_ID, L_CITY, L_STATE, SUM(TMIN + TSEC) AS H_S
  FROM F_18_13_LISTENER L, (SELECT *
    FROM F_18_13_LISTENER_STREAMS_TRACK L_S_T, F_18_13_TRACK T
    WHERE L_S_T.T_ID = T.T_ID) LTD, F_18_13_LOCATION LO
  WHERE L.L_ID = LTD.L_ID AND L.LO_ID = LO.LO_ID
  group by L.LO_ID, L_CITY, L_STATE
  ORDER BY SUM(TMIN + TSEC) DESC;

--QUERY-2: how many times a listener streams a particular ad of an ad company, revenue generated by each listener for each ad watched?
--calc the times a listener watches an ad of a particular ad company.

SELECT DISTINCT L.L_ID, FNAME, LNAME, SUM(REVENUE_LISTENER_WATCH_AD)
FROM (SELECT L_ID, LWA.AD_ID, COUNT(LWA.AD_ID) AS NO_TIMES_AD_WATCHED, RATE_WATCH, (COUNT(LWA.AD_ID) * RATE_WATCH) AS REVENUE_LISTENER_WATCH_AD
FROM F_18_13_LISTENER_WATCHES_AD LWA, F_18_13_ADVERTISEMENT A
WHERE LWA.AD_ID = A.AD_ID
GROUP BY L_ID, LWA.AD_ID, RATE_WATCH) LD, F_18_13_LISTENER L
WHERE L.L_ID = LD.L_ID
group by L.L_ID, FNAME, LNAME;


--QUERY-3: identify top 10 artist
--identify the tracks with most times of streams;identify the associated artist.

SELECT *
FROM (SELECT ARP.AR_ID, AR_FNAME, AR_LNAME, times_played
FROM (SELECT AR_ID, times_played
      FROM (SELECT A_ID, times_played
              FROM   (SELECT T_ID, COUNT(L_ID) as times_played
                      FROM F_18_13_LISTENER_STREAMS_TRACK LST
                      group by T_ID) TP, F_18_13_TRACK T
                      WHERE TP.T_ID = T.T_ID ) AP, F_18_13_ALBUM_HAS_ARTIST AA
              WHERE AP.A_ID = AA.A_ID ) ARP, F_18_13_ARTIST AR
      WHERE ARP.AR_ID = AR.AR_ID)
WHERE ROWNUM <=10
ORDER BY times_played DESC;


--QUERY-4: recommended tracks for a listener.
-- based on getting the top track from the interested genre for a listener.

SELECT FNAME, LNAME, TNAME as rec_track, ANAME as rec_album, times_played
FROM (SELECT L_ID, G.INTERESTED_GENRE AS I_GENRE, TNAME, ANAME, times_played
       FROM (SELECT TP.T_ID AS T_D, times_played, TNAME, T.A_ID AS A_D, ANAME, genre
            FROM   (SELECT T_ID, count(L_ID) AS times_played
                    FROM F_18_13_LISTENER_STREAMS_TRACK LST
                    GROUP BY T_ID) TP, F_18_13_TRACK T, F_18_13_ALBUM A
            WHERE TP.T_ID = T.T_ID AND T.A_ID = A.A_ID) TPAD, F_18_13_I_GENRE G
      WHERE TPAD.GENRE = G.INTERESTED_GENRE) LRT, F_18_13_LISTENER L
WHERE LRT.L_ID = L.L_ID AND ROWNUM <=50
group by FNAME,LNAME, TNAME, ANAME, times_played
ORDER BY times_played DESC;



--QUERY-5: identify listeners who have generated maximum ad revenue over a duration of 3 months
--based on identify listeners who have streamed songs the most over 3 months

SELECT *
FROM(      SELECT DISTINCT L.L_ID, FNAME, LNAME, SUM(REVENUE_LISTENER_WATCH_AD) as trevenue
      FROM  (SELECT  LD.L_ID, AD, COUNT(AD) AS NO_TIMES_AD_WATCHED, RATE_WATCH, (COUNT(AD) * RATE_WATCH) AS REVENUE_LISTENER_WATCH_AD
      FROM  (SELECT L_ID, LWA.AD_ID AS AD, COUNT(LWA.AD_ID) AS NO_TIMES_AD_WATCHED, RATE_WATCH, (COUNT(LWA.AD_ID) * RATE_WATCH) AS REVENUE_LISTENER_WATCH_AD
             FROM F_18_13_LISTENER_WATCHES_AD LWA, F_18_13_ADVERTISEMENT A
             WHERE LWA.AD_ID = A.AD_ID
             GROUP BY L_ID, LWA.AD_ID, RATE_WATCH) LD, F_18_13_AD_DATE V
      WHERE LD.AD = V.AD_ID AND AD_DATE <= '11-Oct-2018' AND AD_DATE >= '05-July-2018'
      GROUP BY LD.L_ID, AD, RATE_WATCH) LAD, F_18_13_LISTENER L
WHERE L.L_ID = LAD.L_ID
group by L.L_ID, FNAME, LNAME)
where ROWNUM <=10
order by trevenue desc;


-- QUERY-6: IDENTIFY USERS WHO HAVE NOT STREAMED ANYTHING FOR THE PAST 1 MONTH.
SELECT DISTINCT FNAME, LNAME
FROM F_18_13_LISTENER
WHERE L_ID NOT IN
              (SELECT DISTINCT LST.L_ID
              FROM F_18_13_LISTENER_STREAMS_TRACK LST, F_18_13_T_DATE TD
              WHERE LST.T_ID = TD.T_ID
              GROUP BY LST.L_ID, T_DATE
              HAVING T_DATE <= '12-Nov-2018' AND T_DATE >= '12-Oct-2018');


-- QUERY-7: compute ad revenue generated by all listeners over a quarter
--THE ADS EVERY USER STREAMS AS WELL(THEIR COUNT AND RATES)
-- revenue GENERATED BY THAT LISTENER BY MULTIPLTYING WITH THE ASSOCIATED ADS AnD THEIR RATES.

SELECT SUM(trevenue) AS TOTAL_REVENUE_ALL_LIST
FROM(      SELECT DISTINCT L.L_ID, FNAME, LNAME, SUM(REVENUE_LISTENER_WATCH_AD) as trevenue
      FROM  (SELECT  LD.L_ID, AD, COUNT(AD) AS NO_TIMES_AD_WATCHED, RATE_WATCH, (COUNT(AD) * RATE_WATCH) AS REVENUE_LISTENER_WATCH_AD
      FROM  (SELECT L_ID, LWA.AD_ID AS AD, COUNT(LWA.AD_ID) AS NO_TIMES_AD_WATCHED, RATE_WATCH, (COUNT(LWA.AD_ID) * RATE_WATCH) AS REVENUE_LISTENER_WATCH_AD
             FROM F_18_13_LISTENER_WATCHES_AD LWA, F_18_13_ADVERTISEMENT A
             WHERE LWA.AD_ID = A.AD_ID
             GROUP BY L_ID, LWA.AD_ID, RATE_WATCH) LD, F_18_13_AD_DATE V
      WHERE LD.AD = V.AD_ID AND AD_DATE <= '11-Oct-2018' AND AD_DATE >= '05-July-2018'
      GROUP BY LD.L_ID, AD, RATE_WATCH) LAD, F_18_13_LISTENER L
WHERE L.L_ID = LAD.L_ID
group by L.L_ID, FNAME, LNAME);


--QUERY-8: identify artists whose tracks are streamed the least
--based on identify tracks with least mins of streamed, identify the associated artists

SELECT *
FROM (SELECT ARP.AR_ID, AR_FNAME, AR_LNAME, times_played
FROM (SELECT AR_ID, times_played
      FROM (SELECT A_ID, times_played
              FROM   (SELECT T_ID, COUNT(L_ID) as times_played
                      FROM F_18_13_LISTENER_STREAMS_TRACK LST
                      group by T_ID) TP, F_18_13_TRACK T
                      WHERE TP.T_ID = T.T_ID ) AP, F_18_13_ALBUM_HAS_ARTIST AA
              WHERE AP.A_ID = AA.A_ID ) ARP, F_18_13_ARTIST AR
      WHERE ARP.AR_ID = AR.AR_ID)
WHERE ROWNUM <=10
ORDER BY times_played ASC;



-- QUERY-9: calc the operational cost in a quarter for paying the recording labels
--based on no. of times a track is streamed, then the cost by multiplying the associated rate/stream with no. of times particular track is streamed.

SELECT TASD.RNAME, SUM(OPCOST_PER_TRACK) AS RL_OP_COST
FROM (SELECT T_D, TNAME, NO_TIMES_TRACK_STREAMED, A_D, ANAME, RNAME, RATE_STREAM, (NO_TIMES_TRACK_STREAMED * RATE_STREAM) AS OPCOST_PER_TRACK, T_DATE
      FROM(SELECT T_D, TNAME, NO_TIMES_TRACK_STREAMED, A.A_ID as A_D, ANAME, RNAME, RATE_STREAM, (NO_TIMES_TRACK_STREAMED * RATE_STREAM) AS OPCOST_PER_TRACK
            FROM  (SELECT DISTINCT LST.T_ID AS T_D, TNAME, COUNT(L_ID) AS NO_TIMES_TRACK_STREAMED, A_ID
                          FROM F_18_13_LISTENER_STREAMS_TRACK LST, F_18_13_TRACK T
                          WHERE LST.T_ID = T.T_ID
                          GROUP BY LST.T_ID, TNAME, A_ID) TS, F_18_13_ALBUM A
                  WHERE TS.A_ID = A.A_ID) TAD, F_18_13_T_DATE TD
      WHERE TAD.T_D = TD.T_ID AND T_DATE <= '12-Nov-2018' AND T_DATE >= '05-July-2018') TASD, F_18_13_RECORDING_LABELS R
WHERE TASD.RNAME = R.RNAME
GROUP BY TASD.RNAME
ORDER BY RL_OP_COST;


--QUERY-10: calc the operational cost for the servers and employees at every location.

SELECT L_D, L_CITY, L_STATE, S_ID, COST, E_ID, SALARY, SUM(COST + SALARY) AS OPCOST_PER_LOCATION
FROM      (SELECT DISTINCT S.LO_ID AS L_D, L_CITY, L_STATE, S_ID, COST
           FROM F_18_13_SERVER S, F_18_13_LOCATION L
           WHERE S.LO_ID = L.LO_ID) SL, F_18_13_EMPLOYEE E
WHERE SL.L_D = E.LO_ID
GROUP BY L_D, L_CITY, L_STATE, S_ID, COST, E_ID, SALARY;
